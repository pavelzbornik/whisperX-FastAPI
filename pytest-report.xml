<?xml version="1.0" encoding="utf-8"?><testsuites name="pytest tests"><testsuite name="pytest" errors="0" failures="5" skipped="4" tests="21" time="36.836" timestamp="2025-10-23T15:23:43.081469+00:00" hostname="runnervmwhb2z"><testcase classname="tests.test_all" name="test_index" time="0.142" /><testcase classname="tests.test_all" name="test_health_check" time="0.004" /><testcase classname="tests.test_all" name="test_liveness_check" time="0.003" /><testcase classname="tests.test_all" name="test_readiness_check" time="0.004" /><testcase classname="tests.test_all" name="test_readiness_check_with_db_failure" time="0.005" /><testcase classname="tests.test_all" name="test_speech_to_text" time="1.116"><failure message="ValueError: Task failed with error: Cannot find an appropriate cached snapshot folder for the specified revision on the local disk and outgoing traffic has been disabled. To enable repo look-ups and downloads online, pass 'local_files_only=False' as input.">def test_speech_to_text() -&gt; None:
        """Test the speech-to-text service."""
&gt;       assert generic_transcription("/speech-to-text") is not None
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_all.py:328:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/test_all.py:205: in generic_transcription
    assert wait_for_task_completion(identifier), (
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

identifier = '88b26284-27de-4fdf-ac79-003af3179248', max_attempts = 2
delay = 10

    def wait_for_task_completion(
        identifier: str, max_attempts: int = 2, delay: int = 10
    ) -&gt; bool:
        """
        Wait for a task to complete by polling its status.

        Args:
            identifier (str): The task identifier.
            max_attempts (int): Maximum number of polling attempts.
            delay (int): Delay between polling attempts in seconds.

        Returns:
            bool: True if the task completed, False otherwise.
        """
        from app.schemas import TaskStatus

        attempts = 0
        while attempts &lt; max_attempts:
            status = get_task_status(identifier)
            if status == TaskStatus.completed:
                return True
            if status == TaskStatus.failed:
                response = client.get(f"/task/{identifier}")
                error_message = response.json().get("error", "Unknown error")
&gt;               raise ValueError(f"Task failed with error: {error_message}")
E               ValueError: Task failed with error: Cannot find an appropriate cached snapshot folder for the specified revision on the local disk and outgoing traffic has been disabled. To enable repo look-ups and downloads online, pass 'local_files_only=False' as input.

tests/test_all.py:176: ValueError</failure></testcase><testcase classname="tests.test_all" name="test_transcribe" time="0.103"><failure message="ValueError: Task failed with error: Cannot find an appropriate cached snapshot folder for the specified revision on the local disk and outgoing traffic has been disabled. To enable repo look-ups and downloads online, pass 'local_files_only=False' as input.">def test_transcribe() -&gt; None:
        """Test the transcription service."""
&gt;       assert generic_transcription("/service/transcribe") is not None
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_all.py:333:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/test_all.py:205: in generic_transcription
    assert wait_for_task_completion(identifier), (
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

identifier = '5c6d50c5-2942-4050-95cf-37d2e94a5dcd', max_attempts = 2
delay = 10

    def wait_for_task_completion(
        identifier: str, max_attempts: int = 2, delay: int = 10
    ) -&gt; bool:
        """
        Wait for a task to complete by polling its status.

        Args:
            identifier (str): The task identifier.
            max_attempts (int): Maximum number of polling attempts.
            delay (int): Delay between polling attempts in seconds.

        Returns:
            bool: True if the task completed, False otherwise.
        """
        from app.schemas import TaskStatus

        attempts = 0
        while attempts &lt; max_attempts:
            status = get_task_status(identifier)
            if status == TaskStatus.completed:
                return True
            if status == TaskStatus.failed:
                response = client.get(f"/task/{identifier}")
                error_message = response.json().get("error", "Unknown error")
&gt;               raise ValueError(f"Task failed with error: {error_message}")
E               ValueError: Task failed with error: Cannot find an appropriate cached snapshot folder for the specified revision on the local disk and outgoing traffic has been disabled. To enable repo look-ups and downloads online, pass 'local_files_only=False' as input.

tests/test_all.py:176: ValueError</failure></testcase><testcase classname="tests.test_all" name="test_align" time="5.462" /><testcase classname="tests.test_all" name="test_diarize" time="23.128"><failure message="ValueError: Task failed with error: An error happened while trying to locate the file on the Hub and we cannot find the requested files in the local cache. Please check your connection and try again or make sure your Internet connection is on.">def test_diarize() -&gt; None:
        """Test the diarization service."""
&gt;       assert diarize() is not None
               ^^^^^^^^^

tests/test_all.py:344:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/test_all.py:276: in diarize
    assert wait_for_task_completion(identifier), (
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

identifier = '909736b0-4425-4978-9b82-413301373d08', max_attempts = 2
delay = 10

    def wait_for_task_completion(
        identifier: str, max_attempts: int = 2, delay: int = 10
    ) -&gt; bool:
        """
        Wait for a task to complete by polling its status.

        Args:
            identifier (str): The task identifier.
            max_attempts (int): Maximum number of polling attempts.
            delay (int): Delay between polling attempts in seconds.

        Returns:
            bool: True if the task completed, False otherwise.
        """
        from app.schemas import TaskStatus

        attempts = 0
        while attempts &lt; max_attempts:
            status = get_task_status(identifier)
            if status == TaskStatus.completed:
                return True
            if status == TaskStatus.failed:
                response = client.get(f"/task/{identifier}")
                error_message = response.json().get("error", "Unknown error")
&gt;               raise ValueError(f"Task failed with error: {error_message}")
E               ValueError: Task failed with error: An error happened while trying to locate the file on the Hub and we cannot find the requested files in the local cache. Please check your connection and try again or make sure your Internet connection is on.

tests/test_all.py:176: ValueError</failure></testcase><testcase classname="tests.test_all" name="test_flow" time="0.097"><failure message="ValueError: Task failed with error: Cannot find an appropriate cached snapshot folder for the specified revision on the local disk and outgoing traffic has been disabled. To enable repo look-ups and downloads online, pass 'local_files_only=False' as input.">def test_flow() -&gt; None:
        """Test the complete flow of transcription, alignment, diarization, and combination."""
        # Create temporary files for transcript, aligned transcript, and diarization
        with (
            tempfile.NamedTemporaryFile(mode="w", delete=False) as transcript_file,
            tempfile.NamedTemporaryFile(mode="w", delete=False) as aligned_transcript_file,
            tempfile.NamedTemporaryFile(mode="w", delete=False) as diarization_file,
        ):
            # Write the transcription result to the temporary transcript file
&gt;           json.dump(generic_transcription("/service/transcribe"), transcript_file)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_all.py:357:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/test_all.py:205: in generic_transcription
    assert wait_for_task_completion(identifier), (
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

identifier = '04f4ebb2-8b54-4ef6-8b0c-d186e4a2128c', max_attempts = 2
delay = 10

    def wait_for_task_completion(
        identifier: str, max_attempts: int = 2, delay: int = 10
    ) -&gt; bool:
        """
        Wait for a task to complete by polling its status.

        Args:
            identifier (str): The task identifier.
            max_attempts (int): Maximum number of polling attempts.
            delay (int): Delay between polling attempts in seconds.

        Returns:
            bool: True if the task completed, False otherwise.
        """
        from app.schemas import TaskStatus

        attempts = 0
        while attempts &lt; max_attempts:
            status = get_task_status(identifier)
            if status == TaskStatus.completed:
                return True
            if status == TaskStatus.failed:
                response = client.get(f"/task/{identifier}")
                error_message = response.json().get("error", "Unknown error")
&gt;               raise ValueError(f"Task failed with error: {error_message}")
E               ValueError: Task failed with error: Cannot find an appropriate cached snapshot folder for the specified revision on the local disk and outgoing traffic has been disabled. To enable repo look-ups and downloads online, pass 'local_files_only=False' as input.

tests/test_all.py:176: ValueError</failure></testcase><testcase classname="tests.test_all" name="test_combine" time="0.046" /><testcase classname="tests.test_all" name="test_speech_to_text_url" time="0.361"><failure message="ValueError: Task failed with error: Cannot find an appropriate cached snapshot folder for the specified revision on the local disk and outgoing traffic has been disabled. To enable repo look-ups and downloads online, pass 'local_files_only=False' as input.">def test_speech_to_text_url() -&gt; None:
        """Test the speech-to-text service with a URL input."""
        # There is sometimes issue with CUDA memory better run this test individually
        response = client.post(
            f"/speech-to-text-url?device={os.getenv('DEVICE')}&amp;compute_type={os.getenv('COMPUTE_TYPE')}",
            data={
                "url": "https://github.com/tijszwinkels/whisperX-api/raw/main/audio_en.mp3"
            },
        )
        assert response.status_code == 200
        assert "Task queued" in response.json()["message"]

        # Extract identifier from the response
        identifier = response.json()["identifier"]

        # Wait for the task to be completed
&gt;       assert wait_for_task_completion(identifier), (
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
            f"Task with identifier {identifier} did not complete within the expected time."
        )

tests/test_all.py:409:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

identifier = '7af970ad-34d8-49c8-b659-ff5f823c2ac3', max_attempts = 2
delay = 10

    def wait_for_task_completion(
        identifier: str, max_attempts: int = 2, delay: int = 10
    ) -&gt; bool:
        """
        Wait for a task to complete by polling its status.

        Args:
            identifier (str): The task identifier.
            max_attempts (int): Maximum number of polling attempts.
            delay (int): Delay between polling attempts in seconds.

        Returns:
            bool: True if the task completed, False otherwise.
        """
        from app.schemas import TaskStatus

        attempts = 0
        while attempts &lt; max_attempts:
            status = get_task_status(identifier)
            if status == TaskStatus.completed:
                return True
            if status == TaskStatus.failed:
                response = client.get(f"/task/{identifier}")
                error_message = response.json().get("error", "Unknown error")
&gt;               raise ValueError(f"Task failed with error: {error_message}")
E               ValueError: Task failed with error: Cannot find an appropriate cached snapshot folder for the specified revision on the local disk and outgoing traffic has been disabled. To enable repo look-ups and downloads online, pass 'local_files_only=False' as input.

tests/test_all.py:176: ValueError</failure></testcase><testcase classname="tests.test_all" name="test_get_all_tasks_status" time="0.007" /><testcase classname="tests.test_all" name="test_delete_task" time="0.098" /><testcase classname="tests.test_whisperx_services" name="test_transcribe_with_whisper_gpu" time="0.000"><skipped type="pytest.skip" message="CUDA not available">/home/runner/work/whisperX-FastAPI/whisperX-FastAPI/tests/test_whisperx_services.py:78: CUDA not available</skipped></testcase><testcase classname="tests.test_whisperx_services" name="test_transcribe_with_whisper_cpu" time="0.209" /><testcase classname="tests.test_whisperx_services" name="test_diarize_gpu" time="0.000"><skipped type="pytest.skip" message="CUDA not available">/home/runner/work/whisperX-FastAPI/whisperX-FastAPI/tests/test_whisperx_services.py:129: CUDA not available</skipped></testcase><testcase classname="tests.test_whisperx_services" name="test_align_whisper_output" time="0.198" /><testcase classname="tests.test_whisperx_services" name="test_process_audio_common_gpu" time="0.000"><skipped type="pytest.skip" message="CUDA not available">/home/runner/work/whisperX-FastAPI/whisperX-FastAPI/tests/test_whisperx_services.py:175: CUDA not available</skipped></testcase><testcase classname="tests.test_whisperx_services" name="test_gpu_memory_logging" time="0.000"><skipped type="pytest.skip" message="CUDA not available">/home/runner/work/whisperX-FastAPI/whisperX-FastAPI/tests/test_whisperx_services.py:247: CUDA not available</skipped></testcase><testcase classname="tests.test_whisperx_services" name="test_error_handling" time="0.007" /></testsuite></testsuites>
